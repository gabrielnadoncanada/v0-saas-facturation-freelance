import { z } from "zod";
import { getInvoices } from "@/features/invoice/list/model/getInvoices";
import { getInvoice } from "@/features/invoice/view/model/getInvoice";
import { createInvoice } from "@/features/invoice/create/model/createInvoice";
import { createInvoiceItems } from "@/features/invoice/create/model/createInvoiceItems";
import { getClients } from "@/features/client/list/model/getClients";
import { sendInvoiceEmailAction } from "@/features/invoice/email";

export const invoiceTools = {
  listInvoices: {
    description: "List all invoices with their status and basic information",
    parameters: z.object({}),
    execute: async function () {
      const invoices = await getInvoices();
      return invoices;
    },
  },
  getInvoiceDetails: {
    description: "Get detailed information about a specific invoice",
    parameters: z.object({
      invoiceId: z.string(),
    }),
    execute: async function ({ invoiceId }: { invoiceId: string }) {
      const invoice = await getInvoice(invoiceId);
      return invoice;
    },
  },
  createInvoice: {
    description: "Create a new invoice with the provided information and items",
    parameters: z.object({
      client_id: z.string().min(1, "Client ID is required"),
      issue_date: z.string().min(1, "Issue date is required (YYYY-MM-DD format)"),
      due_date: z.string().min(1, "Due date is required (YYYY-MM-DD format)"),
      status: z.string().default("draft"),
      currency: z.string().default("EUR"),
      language: z.string().default("fr"),
      notes: z.string().optional(),
      tax_rate: z.number().default(20),
      items: z.array(z.object({
        description: z.string().min(1, "Item description is required"),
        quantity: z.number().min(1, "Quantity must be at least 1"),
        unit_price: z.number().min(0, "Unit price must be positive"),
      })).min(1, "At least one item is required"),
    }),
    execute: async function ({ client_id, issue_date, due_date, status, currency, language, notes, tax_rate, items }: {
      client_id: string;
      issue_date: string;
      due_date: string;
      status?: string;
      currency?: string;
      language?: string;
      notes?: string;
      tax_rate?: number;
      items: Array<{
        description: string;
        quantity: number;
        unit_price: number;
      }>;
    }) {
      // First, get the client to include in the invoice data
      const clients = await getClients();
      const client = clients.find(c => c.id === client_id);
      
      if (!client) {
        throw new Error(`Client with ID ${client_id} not found`);
      }

      const invoiceData = {
        id: "", // Will be set by the database
        client,
        issue_date,
        due_date,
        status: status || "draft",
        currency: currency || "EUR",
        language: language || "fr",
        notes: notes || "",
        tax_rate: tax_rate || 20,
        invoice_number: "", // Will be generated by the database
        subtotal: 0,
        tax_total: 0,
        total: 0,
        payments: [],
      };

      // Create the invoice
      const invoiceId = await createInvoice(invoiceData);

      // Prepare invoice items
      const invoiceItems = items.map((item, index) => ({
        id: "", // Will be set by the database
        invoice_id: invoiceId,
        description: item.description,
        quantity: item.quantity,
        unit_price: item.unit_price,
        tax_rate: tax_rate || 20,
        amount: item.quantity * item.unit_price,
        position: index + 1,
      }));

      // Create the invoice items
      await createInvoiceItems(invoiceId, invoiceItems, tax_rate || 20);

      // Calculate totals
      const subtotal = items.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);
      const tax_total = subtotal * (tax_rate || 20) / 100;
      const total = subtotal + tax_total;

      return {
        success: true,
        invoice_id: invoiceId,
        client_name: client.name,
        subtotal,
        tax_total,
        total,
        currency: currency || "EUR",
        items_count: items.length,
        message: `Invoice successfully created for client "${client.name}" with ${items.length} item(s). Total: ${total.toFixed(2)} ${currency || "EUR"}`,
      };
    },
  },
  createSimpleInvoice: {
    description: "Create a simple invoice with a single item for a total amount",
    parameters: z.object({
      client_id: z.string().min(1, "Client ID is required"),
      total_amount: z.number().min(0.01, "Total amount must be positive"),
      description: z.string().default("Service provided"),
      issue_date: z.string().optional(),
      due_date: z.string().optional(),
      currency: z.string().default("USD"),
      tax_rate: z.number().default(0),
    }),
    execute: async function ({ client_id, total_amount, description, issue_date, due_date, currency, tax_rate }: {
      client_id: string;
      total_amount: number;
      description?: string;
      issue_date?: string;
      due_date?: string;
      currency?: string;
      tax_rate?: number;
    }) {
      // Get the client to include in the invoice data
      const clients = await getClients();
      const client = clients.find(c => c.id === client_id);
      
      if (!client) {
        throw new Error(`Client with ID ${client_id} not found`);
      }

      // Set default dates if not provided
      const today = new Date();
      const defaultIssueDate = issue_date || today.toISOString().split('T')[0];
      const defaultDueDate = due_date || new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

      // Calculate unit price based on total amount and tax rate
      const taxRateDecimal = (tax_rate || 0) / 100;
      const unitPrice = total_amount / (1 + taxRateDecimal);

      const invoiceData = {
        id: "", // Will be set by the database
        client,
        issue_date: defaultIssueDate,
        due_date: defaultDueDate,
        status: "draft",
        currency: currency || "USD",
        language: "fr",
        notes: "",
        tax_rate: tax_rate || 0,
        invoice_number: "", // Will be generated by the database
        subtotal: 0,
        tax_total: 0,
        total: 0,
        payments: [],
      };

      // Create the invoice
      const invoiceId = await createInvoice(invoiceData);

      // Create a single invoice item
      const invoiceItems = [{
        id: "", // Will be set by the database
        invoice_id: invoiceId,
        description: description || "Service provided",
        quantity: 1,
        unit_price: unitPrice,
        tax_rate: tax_rate || 0,
        amount: unitPrice,
        position: 1,
      }];

      // Create the invoice items
      await createInvoiceItems(invoiceId, invoiceItems, tax_rate || 0);

      return {
        success: true,
        invoice_id: invoiceId,
        client_name: client.name,
        total_amount,
        currency: currency || "USD",
        message: `Simple invoice successfully created for client "${client.name}" with total amount: ${total_amount.toFixed(2)} ${currency || "USD"}`,
      };
    },
  },
  sendInvoiceEmail: {
    description: "Send an invoice by email to a recipient with PDF attachment",
    parameters: z.object({
      invoiceId: z.string().min(1, "Invoice ID is required"),
      recipientEmail: z.string().email("Valid recipient email is required"),
    }),
    execute: async function ({ invoiceId, recipientEmail }: {
      invoiceId: string;
      recipientEmail: string;
    }) {
      try {
        const result = await sendInvoiceEmailAction(invoiceId, recipientEmail);
        
        if (!result.success) {
          throw new Error(result.error || "Failed to send email");
        }

        // Get invoice details for response
        const invoice = await getInvoice(invoiceId);
        
        return {
          success: true,
          invoice_id: invoiceId,
          invoice_number: invoice.invoice_number,
          recipient_email: recipientEmail,
          message: `Invoice ${invoice.invoice_number} has been successfully sent to ${recipientEmail}`,
        };
      } catch (error) {
        throw new Error(`Failed to send invoice email: ${error instanceof Error ? error.message : String(error)}`);
      }
    },
  },
  createInvoiceWorkflow: {
    description: "Complete workflow to create an invoice and optionally send it by email. Will create client if needed.",
    parameters: z.object({
      client_name: z.string().min(1, "Client name is required"),
      client_email: z.string().email("Valid client email is required"),
      total_amount: z.number().min(0.01, "Total amount must be positive"),
      description: z.string().default("Service provided"),
      currency: z.string().default("USD"),
      send_email: z.boolean().default(false),
      tax_rate: z.number().default(0),
    }),
    execute: async function ({ client_name, client_email, total_amount, description, currency, send_email, tax_rate }: {
      client_name: string;
      client_email: string;
      total_amount: number;
      description?: string;
      currency?: string;
      send_email?: boolean;
      tax_rate?: number;
    }) {
      try {
        // Step 1: Try to find existing client
        const clients = await getClients();
        let client = clients.find(c => 
          c.name.toLowerCase().includes(client_name.toLowerCase())
        );
        
        // Step 2: Create client if not found
        if (!client) {
          const { createClient } = await import("@/features/client/create/model/createClient");
          const clientData = {
            name: client_name,
            email: client_email,
            phone: "",
            billing_address: "",
            billing_city: "",
            billing_postal_code: "",
            billing_country: "",
            shipping_address: "",
            shipping_city: "",
            shipping_postal_code: "",
            shipping_country: "",
            notes: "",
            sameAsShipping: false,
          };
          
          client = await createClient(clientData);
        }

        // Step 3: Create invoice
        const today = new Date();
        const issueDate = today.toISOString().split('T')[0];
        const dueDate = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

        // Calculate unit price based on total amount and tax rate
        const taxRateDecimal = (tax_rate || 0) / 100;
        const unitPrice = total_amount / (1 + taxRateDecimal);

        const invoiceData = {
          id: "",
          client,
          issue_date: issueDate,
          due_date: dueDate,
          status: "draft",
          currency: currency || "USD",
          language: "fr",
          notes: "",
          tax_rate: tax_rate || 0,
          invoice_number: "",
          subtotal: 0,
          tax_total: 0,
          total: 0,
          payments: [],
        };

        const invoiceId = await createInvoice(invoiceData);

        // Create invoice item
        const invoiceItems = [{
          id: "",
          invoice_id: invoiceId,
          description: description || "Service provided",
          quantity: 1,
          unit_price: unitPrice,
          tax_rate: tax_rate || 0,
          amount: unitPrice,
          position: 1,
        }];

        await createInvoiceItems(invoiceId, invoiceItems, tax_rate || 0);

        let emailResult = null;
        
        // Step 4: Send email if requested
        if (send_email && client_email) {
          try {
            const emailResponse = await sendInvoiceEmailAction(invoiceId, client_email);
            if (emailResponse.success) {
              emailResult = {
                success: true,
                message: `Invoice sent successfully to ${client_email}`,
              };
            } else {
              emailResult = {
                success: false,
                message: `Failed to send email: ${emailResponse.error}`,
              };
            }
          } catch (emailError) {
            emailResult = {
              success: false,
              message: `Failed to send email: ${emailError instanceof Error ? emailError.message : String(emailError)}`,
            };
          }
        }

        return {
          success: true,
          client_created: !clients.find(c => c.id === client.id),
          client_name: client.name,
          client_email: client.email,
          invoice_id: invoiceId,
          total_amount,
          currency: currency || "USD",
          email_sent: send_email ? emailResult?.success : false,
          email_message: emailResult?.message,
          message: `Complete workflow executed successfully:
- Client: ${client.name} ${!clients.find(c => c.id === client.id) ? '(created new)' : '(existing)'}
- Invoice created with total: ${total_amount.toFixed(2)} ${currency || "USD"}
- Email ${send_email ? (emailResult?.success ? 'sent successfully' : 'failed to send') : 'not requested'}`,
        };
      } catch (error) {
        throw new Error(`Workflow failed: ${error instanceof Error ? error.message : String(error)}`);
      }
    },
  },
}; 