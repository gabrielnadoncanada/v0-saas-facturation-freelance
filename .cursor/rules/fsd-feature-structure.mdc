---
description: 
globs: 
alwaysApply: false
---
# Feature Sliced Architecture — Feature Structure

This project follows the Feature-Sliced Design (FSD) architecture for organizing business features. Each feature (such as `invoice`, `client`, `auth`, etc.) is structured into subfolders that reflect user intents (`create`, `edit`, `list`, `view`, etc.), and shares logic internally via a `shared/` folder. Global logic is always extracted into the root-level `shared/`.

## Canonical Feature Structure

features/
└── feature/
├── create/
│ ├── ui/
│ ├── actions/
│ └── schema/
├── edit/
│ ├── ui/
│ ├── actions/
│ └── schema/
├── list/
│ ├── actions/
│ └── model/
├── view/
│ ├── actions/
│ └── model/
├── shared/
│ ├── model/
│ ├── hooks/
│ ├── types/
│ ├── schema/
│ └── lib/

- Use `shared/` within a feature for logic reused inside the feature only.
- Use the root-level `shared/` for cross-feature logic (auth, i18n, formatting, etc).

## Naming Conventions

- Server action: `*.action.ts` (e.g., `createInvoice.action.ts`)
- DB interaction: `verbEntity[InDb].ts` (e.g., `fetchInvoiceById.ts`)
- React Hook: `use*` (e.g., `useInvoiceForm.ts`)
- Zod Schema: `*.schema.ts` (e.g., `invoice.base.schema.ts`)
- Pure util function: `verbEntity.ts` (e.g., `formatInvoiceDate.ts`)

## Global Shared Structure

shared/
├── lib/
│ ├── auth/
│ ├── date/
│ ├── currency/
├── schema/
├── types/
├── services/
├── ui/
├── config/

- Place cross-feature utilities in the root `shared/` folder.
- Never mix intent folders (e.g., don't call `getInvoiceById` from `edit/` if it lives in `create/`).

## Testing

- `model/` and `lib/` should be unit tested with Supabase/client mocks.
- `actions/` should be tested at the integration level or via E2E flows.
- `hooks/` should be tested with React Testing Library if needed.

